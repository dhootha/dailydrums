<?php

if (!defined('BASEPATH'))
    exit('No direct script access allowed');

class Utils {

    public $ci;

    public function __construct() {
        $this->ci = & get_instance();
        
        $this->ci->load->library('email');
        $config['wordwrap'] = TRUE;
        $config['mailtype'] = 'html';
        $this->ci->email->initialize($config);
        
        
        //$GET_profile_user = $this->ci->uri->uri_to_assoc(1); 
        //print_r($GET_profile_user);die;
    }

    /**
     * @param type $dataArray = 
     *  array('to'=>'to@mail.com', 
     *        'from'=>'frm@mail.com',
     *        'subject'=>'Sample Subject',
     *        'mailbody'=>'Sample messag body'
     *  )
     */
    public function send_email($to,$subject='',$mailbody='',$from='webmaster@brainyax.com',$from_name='Brainyax') {

        if (!empty($to) && !empty($mailbody)) {
            $admin_email = $this->ci->config->item('admin_email');
            $this->ci->email->from($from, $from_name);
            $this->ci->email->to($to);
            $this->ci->email->bcc($admin_email);
            //$this->ci->email->bcc('them@their-example.com');

            $this->ci->email->subject($subject);
            $this->ci->email->message($mailbody);

            $this->ci->email->send();

            //echo $this->ci->email->print_debugger();
            //exit();
        }
    }
    
    
    public function clean_input_keys($str) {
        if ( ! preg_match("/^[#a-z0-9:_\/-]+$/i", $str)) // <----INS
        {
            return false;
        }
        else 
            return true;
          
    }
    
    
    /** 
     * Encoding any string useing base64 user
     * @param type $string raw string
     * @return type encoded value
     */
    public function encode_string($string){
        $encoded_string = '';
        
        if(!empty($string)){
        
            $encoded_string = rtrim(strtr(base64_encode($string), '+/', '-_'), '=');
        }
        return $encoded_string;
    }
    
    
    /**
     * Decode the above function (encode_string();)
     * @param type $string encoded-string
     * @return type decoded original value
     */
    public function decode_string($string) {
        $decoded_string = '';
        
        if(!empty($string)){
            $decoded_string = base64_decode(strtr($string, '-_', '+/'));
        }
        return $decoded_string;
    }
    
    
    /**
     * To set the selected value
     * @param type $str_option_value = the select box option value
     * @param type $str_db_value = the value from db which need to be selected
     */
    public function selected_options($str_option_value, $str_db_value){
        if($str_option_value == $str_db_value)
            return 'selected';
        else
            return '';
    }
    
    
    /**
     * This will create option value from array
     * @param type $optionArray - array('value'=>'text to show',...)
     * @param type $value_selected_db
     * @return string
     */
    public function  array_to_optionvalue($optionArray,$value_selected_db=''){
        $html_string = '';
         
        if(!empty($optionArray) && is_array($optionArray)){
            
            foreach($optionArray as $options => $options_text){
                $html_string .='
                    <option value="'.$options.'" '.$this->selected_options($options, $value_selected_db).'>'.$options_text.'</option>
                ';
                
            }//end of foreach            
        }
        
        return $html_string;
    }

}

//end of class

/* End of file Someclass.php */